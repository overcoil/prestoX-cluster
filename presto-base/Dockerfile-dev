#
# This docker image is for launching test purpose presto cluster.
#

FROM openjdk:11-slim
LABEL maintainer="overcoil"

ARG VERSION
# these two arg need to be filled in as:
#
#  PrestoDB:
#
#    PKG_REPO_SUBPATH=com/facebook/presto
#    PRESTVAR=presto
#
#  Trino (at least 359 onward):
#
#    PKG_REPO_SUBPATH=io/trino
#    PRESTVAR=trino
#
#
ARG PKG_REPO_SUBPATH
ARG PRESTVAR
ARG MUTATION

ENV PX_MUTATION="${MUTATION}"
ENV PRESTO_VERSION="${VERSION}"
ENV PRESTO_HOME=/usr/local/"${PRESTVAR}"
# PX_HOME is a fork-invariant path to reduce the muliplication of options 
ENV PX_HOME=/usr/local/px
#ENV BASE_URL=https://repo1.maven.org/maven2

# install dev tools
# added dnsutils for nslookup and the iputils variant of ping

RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    dnsutils \
    iputils-ping \
    less \
    python \
    python-dev \
    python3-pip \
    rsync \
    sudo \
    tar \
    uuid-runtime \
    wget 

# install confd to handle template from env var
# https://github.com/kelseyhightower/confd/blob/master/docs/installation.md
# note the addition to ENV further down
RUN wget https://github.com/kelseyhightower/confd/releases/download/v0.16.0/confd-0.16.0-linux-amd64 \
    && mkdir -p /opt/confd/bin \
    && mkdir -p /etc/confd/conf.d \
    && mkdir -p /etc/confd/templates \
    && mv confd-0.16.0-linux-amd64 /opt/confd/bin/confd \
    && chmod +x /opt/confd/bin/confd

# the fragment controls the memory configuration of each node
COPY ${PRESTVAR}-config.properties-fragment.toml /etc/confd/conf.d/config.properties-fragment.toml 
COPY ${PRESTVAR}-config.properties-fragment.tmpl /etc/confd/templates/config.properties-fragment.tmpl

# NB: the derived images (e.g., trino-dbx-worker) must add this config.properties-fragment into their config.properties.template; see presto/trino.sh

RUN apt-get install -y  python-is-python3   

RUN pip install jinja2

ENV JAVA_HOME /usr/java/default
ENV PATH $PATH:$JAVA_HOME/bin:/opt/confd/bin

WORKDIR /usr/local/bin

# pack in the CLI for convenience
ADD px-bin/${PRESTVAR}-cli-${PRESTO_VERSION}${PX_MUTATION}-executable.jar /usr/local/bin
RUN chmod +x ${PRESTVAR}-cli-${PRESTO_VERSION}${PX_MUTATION}-executable.jar

# make the CLI available with a fork/version-invariant name
RUN mv ${PRESTVAR}-cli-${PRESTO_VERSION}${PX_MUTATION}-executable.jar px-cli

WORKDIR /usr/local
ADD px-bin/${PRESTVAR}-server-${PRESTO_VERSION}${PX_MUTATION}.tar.gz /usr/local
#RUN tar xvzf ${PRESTVAR}-server-${PRESTO_VERSION}.tar.gz -C /usr/local/
RUN ln -s /usr/local/${PRESTVAR}-server-${PRESTO_VERSION} $PRESTO_HOME
RUN ln -s /usr/local/${PRESTVAR}-server-${PRESTO_VERSION} $PX_HOME

COPY scripts ${PX_HOME}/scripts

# Create data dir
RUN mkdir -p $PRESTO_HOME/data
VOLUME ["$PRESTO_HOME/data"]

